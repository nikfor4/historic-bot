import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import CallbackQueryHandler, ContextTypes, ApplicationBuilder
from services.politician_data import load_all_politicians
from services.user_state import get_user_state
from utils.message_utils import delete_previous_message, split_text_into_pages

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–æ–≤
politicians = load_all_politicians()

async def handle_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∏—Ç–∏–∫–∞)
    if update.callback_query.message:
        await delete_previous_message(update.callback_query.message, context)

    user_id = update.effective_user.id
    idx = get_user_state(user_id) or 0
    pol = politicians[idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª–∏—Ç–∏–∫–∞
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton('üìñ –ò—Å—Ç–æ—Ä–∏—è',    callback_data='history')],
        [InlineKeyboardButton('üß† –§–∞–∫—Ç—ã',      callback_data='facts')],
        [InlineKeyboardButton('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data='achievements')],
        [InlineKeyboardButton('üîó –°—Å—ã–ª–∫–∏',     callback_data='links')],
        [InlineKeyboardButton('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='start_game')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥',       callback_data='choose_politician')],
    ])

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    img_path = pol.get('image')
    text = f"*{pol['name']} ‚Äî –ú–µ–Ω—é*"
    if img_path and os.path.exists(img_path):
        try:
            with open(img_path, 'rb') as img:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=img,
                    caption=text,
                    parse_mode='Markdown',
                    reply_markup=kb
                )
                return
        except Exception as e:
            print(f"Error sending photo: {e}")

    # –ò–Ω–∞—á–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        parse_mode='Markdown',
        reply_markup=kb
    )

async def handle_menu_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    if update.callback_query.message:
        await delete_previous_message(update.callback_query.message, context)

    user_id = update.effective_user.id
    idx = get_user_state(user_id) or 0
    pol = politicians[idx]
    action = update.callback_query.data

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    if action == 'choose_politician':
        from handlers.choose_politician import show_politician
        await show_politician(update, context, idx)
        return
    if action == 'start_game':
        from handlers.game_module import start_game
        await start_game(update, context)
        return

    # –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    content = pol.get(action)
    pages = content if isinstance(content, list) \
        else split_text_into_pages(content or '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
    context.user_data['pages'] = pages
    context.user_data['page_action'] = action
    context.user_data['pol_name'] = pol['name']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await send_page(update, context, 0)

async def send_page(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    # –ü—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–∂–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query and update.callback_query.message:
        await delete_previous_message(update.callback_query.message, context)

    pages = context.user_data['pages']
    action = context.user_data['page_action']
    name = context.user_data['pol_name']
    total = len(pages)

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'{action}_page_{page-1}'))
    if page < total - 1:
        buttons.append(InlineKeyboardButton('‚û°Ô∏è –î–∞–ª–µ–µ', callback_data=f'{action}_page_{page+1}'))
    buttons.append(InlineKeyboardButton('üîô –ú–µ–Ω—é', callback_data='select_politician'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            f"*{name} ‚Äî {action.upper()} " 
            f"({page+1}/{total})*\n\n{pages[page]}"
        ),
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([buttons])
    )

async def handle_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if update.callback_query.message:
        await delete_previous_message(update.callback_query.message, context)

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –≤–∏–¥–∞ "history_page_2"
    _, page_str = update.callback_query.data.rsplit('_', 1)
    await send_page(update, context, int(page_str))

def register_handlers(app):
    app.add_handler(CallbackQueryHandler(handle_selection,    pattern='^select_politician$'))
    app.add_handler(CallbackQueryHandler(handle_menu_action,  pattern='^(history|facts|achievements|links|start_game|choose_politician)$'))
    app.add_handler(CallbackQueryHandler(handle_page,         pattern='^(history|facts|achievements|links)_page_\\d+$'))