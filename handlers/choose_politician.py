import os
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import CallbackQueryHandler, ContextTypes
from services.politician_data import load_all_politicians
from services.user_state import get_user_state, set_user_state  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º

politicians = load_all_politicians()

def build_keyboard(index: int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data="select_politician")],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_politician"),
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_politician")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
    ])

async def show_politician(update: Update, context: ContextTypes.DEFAULT_TYPE, index: int):
    politician = politicians[index]
    name = politician["name"]
    image_path = politician.get("image", "")

    if not os.path.isabs(image_path):
        image_path = os.path.abspath(os.path.join(os.getcwd(), image_path))

    logging.info(f"–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è '{name}': {image_path}")

    if not os.path.exists(image_path):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        with open(image_path, "rb") as f:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=InputFile(f),
                caption=f"*{name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å.",
                parse_mode="Markdown",
                reply_markup=build_keyboard(index)
            )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

async def handle_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_id = update.effective_user.id
    index = get_user_state(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_user_state –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if index is None:
        index = 0  # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª–∏—Ç–∏–∫–∞
    await show_politician(update, context, index)

async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_id = update.effective_user.id
    current_index = get_user_state(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å

    if current_index is None:
        current_index = 0  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª–∏—Ç–∏–∫–∞

    if update.callback_query.data == "next_politician":
        new_index = (current_index + 1) % len(politicians)
    else:
        new_index = (current_index - 1) % len(politicians)

    set_user_state(user_id, new_index)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_politician(update, context, new_index)

def register_handlers(app):
    app.add_handler(CallbackQueryHandler(handle_choose, pattern="^choose_politician$"))
    app.add_handler(CallbackQueryHandler(handle_navigation, pattern="^(next_politician|prev_politician)$"))
